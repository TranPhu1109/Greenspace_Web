import React, { useState, useEffect } from 'react';
import { Modal, Form, Checkbox, Input, Upload, Button, message, Space, Divider, Progress, Card, Image, Radio, Row, Col, Typography, InputNumber, Alert } from 'antd';
import { UploadOutlined, VideoCameraOutlined, DeleteOutlined, PictureOutlined } from '@ant-design/icons';
import useComplaintStore from '../../../stores/useComplaintStore';
import useProductStore from '../../../stores/useProductStore';
import useAuthStore from '../../../stores/useAuthStore';
import { useCloudinaryStorage } from '@/hooks/useCloudinaryStorage';
import Paragraph from 'antd/es/skeleton/Paragraph';

const { TextArea } = Input;
const { Title, Text } = Typography;

const REFUND_REASONS = [
  "T√¥i ƒë·ªïi √Ω v√† mu·ªën tr·∫£ h√†ng",
  "S·∫£n ph·∫©m b·ªã l·ªói k·ªπ thu·∫≠t",
  "S·∫£n ph·∫©m b·ªã h∆∞ h·ªèng trong qu√° tr√¨nh v·∫≠n chuy·ªÉn",
  "Giao sai s·∫£n ph·∫©m",
  "S·∫£n ph·∫©m giao thi·∫øu",
  "S·∫£n ph·∫©m kh√¥ng ƒë√∫ng m√¥ t·∫£",
  "S·∫£n ph·∫©m qu√° h·∫°n s·ª≠ d·ª•ng",
  "Kh√¥ng c√≤n nhu c·∫ßu s·ª≠ d·ª•ng",
  "ƒê√£ thanh to√°n nh∆∞ng kh√¥ng nh·∫≠n ƒë∆∞·ª£c h√†ng",
  "S·∫£n ph·∫©m b·ªã l·ªói s·∫£n xu·∫•t",
  "Giao h√†ng tr·ªÖ so v·ªõi cam k·∫øt"
];

const EXCHANGE_REASONS = [
  "S·∫£n ph·∫©m kh√¥ng ƒë√∫ng k√≠ch th∆∞·ªõc ho·∫∑c m√†u s·∫Øc",
  "S·∫£n ph·∫©m kh√¥ng ph√π h·ª£p v·ªõi phong c√°ch kh√¥ng gian c·ªßa t√¥i",
  "Mu·ªën ƒë·ªïi sang m·∫´u thi·∫øt k·∫ø kh√°c ph√π h·ª£p h∆°n",
  "T·∫∑ng qu√† kh√¥ng ph√π h·ª£p, mu·ªën ƒë·ªïi sang s·∫£n ph·∫©m kh√°c",
  "Nh√¢n vi√™n t∆∞ v·∫•n sai ho·∫∑c ch∆∞a ƒë√∫ng nhu c·∫ßu",
  "S·∫£n ph·∫©m c√≥ l·ªói nh·∫π, mong mu·ªën ƒë·ªïi c√°i kh√°c",
  "Bao b√¨ s·∫£n ph·∫©m b·ªã r√°ch ho·∫∑c m√≥p m√©o khi nh·∫≠n",
  "Kh√¥ng t∆∞∆°ng th√≠ch v·ªõi kh√¥ng gian hi·ªán t·∫°i (k√≠ch th∆∞·ªõc, m√†u s·∫Øc, ch·∫•t li·ªáu)"
];

const ComplaintModal = ({
  visible,
  onCancel,
  type,
  selectedProductForComplaint,
  onSuccess
}) => {
  const [form] = Form.useForm();
  const [videoFile, setVideoFile] = useState(null);
  const [imageFiles, setImageFiles] = useState([]);
  const [selectedReasons, setSelectedReasons] = useState([]);
  const [isUploading, setIsUploading] = useState(false);
  const [selectedProducts, setSelectedProducts] = useState([]);
  const [productDetails, setProductDetails] = useState({});
  const [complaintType, setComplaintType] = useState(type || 'refund');
  const { createComplaint, loading } = useComplaintStore();
  const { getProductById } = useProductStore();
  const { user } = useAuthStore();
  const { uploadImages, progress, error } = useCloudinaryStorage();

  useEffect(() => {
    if (visible) {
      fetchProductDetails();
      setSelectedProducts([]);
      setSelectedReasons([]);
      setComplaintType(type || 'refund');
      setVideoFile(null);
      setImageFiles([]);
      form.resetFields();
    }
  }, [visible, selectedProductForComplaint, type, form]);

  const fetchProductDetails = async () => {
    if (!selectedProductForComplaint?.orderDetails) return;

    const details = {};
    for (const item of selectedProductForComplaint.orderDetails) {
      try {
        const product = await getProductById(item.productId);
        if (product) {
          details[item.productId] = product;
        }
      } catch (error) {
        console.error(`Error fetching product ${item.productId}:`, error);
      }
    }
    setProductDetails(details);
  };

  const handleProductSelect = (product) => {
    setSelectedProducts(prev => {
      const isSelected = prev.some(p => p.productId === product.productId);
      if (isSelected) {
        return prev.filter(p => p.productId !== product.productId);
      } else {
        return [...prev, { ...product, selectedQuantity: product.quantity }];
      }
    });
  };

  const handleQuantityChange = (productId, value) => {
    setSelectedProducts(prev =>
      prev.map(p =>
        p.productId === productId
          ? { ...p, selectedQuantity: value }
          : p
      )
    );
  };

  const handleSubmit = async (values) => {
    if (selectedProducts.length === 0) {
      message.error('Vui l√≤ng ch·ªçn √≠t nh·∫•t m·ªôt s·∫£n ph·∫©m c·∫ßn khi·∫øu n·∫°i');
      return;
    }

    if (!videoFile) {
      message.error('Vui l√≤ng t·∫£i l√™n m·ªôt video minh ch·ª©ng');
      return;
    }

    try {
      setIsUploading(true);

      // Upload video and images
      let uploadedFiles = [];
      const filesToUpload = [videoFile, ...imageFiles];

      if (filesToUpload.length > 0) {
        try {
          uploadedFiles = await uploadImages(filesToUpload);
          if (error) {
            throw new Error('L·ªói khi t·∫£i l√™n');
          }
        } catch (uploadError) {
          message.error('L·ªói khi t·∫£i l√™n. Vui l√≤ng th·ª≠ l·∫°i.');
          setIsUploading(false);
          return;
        }
      }

      // Combine selected reasons and custom reason
      const allReasons = [
        ...selectedReasons,
        ...(values.customReason ? [values.customReason] : [])
      ].join('; ');

      const images = {
        imageUrl: uploadedFiles[0] || '', // Video URL
        image2: uploadedFiles[1] || '',   // First image URL
        image3: uploadedFiles[2] || ''    // Second image URL
      };

      // Prepare complaint details for all selected products
      const complaintDetails = selectedProducts.map(product => ({
        productId: product.productId,
        quantity: product.selectedQuantity
      }));

      // Create a single complaint with all product details
      await createComplaint({
        userId: user?.id,
        orderId: selectedProductForComplaint.parentOrder.id,
        complaintType: values.complaintType === 'refund' ? 1 : 0, // 1 for refund, 0 for exchange
        reason: allReasons,
        image: images,
        complaintDetails: complaintDetails
      });

      message.success(values.complaintType === 'refund'
        ? 'Y√™u c·∫ßu ho√†n ti·ªÅn ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng'
        : 'Y√™u c·∫ßu ƒë·ªïi tr·∫£ ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng'
      );

      onCancel();
      form.resetFields();
      setVideoFile(null);
      setImageFiles([]);
      setSelectedReasons([]);
      setSelectedProducts([]);
      if (onSuccess) onSuccess();
    } catch (error) {
      message.error('C√≥ l·ªói x·∫£y ra khi g·ª≠i y√™u c·∫ßu');
      console.error('Error submitting complaint:', error);
    } finally {
      setIsUploading(false);
    }
  };

  const handleVideoUpload = (info) => {
    const { file } = info;
    // Only process when status is 'done' or it's a raw File object
    if (file && (file.status === 'done' || file instanceof File)) {
      // Check if it's a video file
      if (!file.type || !file.type.includes('video/')) {
        message.error('Vui l√≤ng t·∫£i l√™n m·ªôt t·ªáp video');
        return;
      }
      console.log('Setting video file:', file);
      setVideoFile(file.originFileObj || file);
    }
  };

  const handleImageUpload = (info) => {
    const { fileList } = info;
    // Filter to maximum 2 images and extract just the file objects
    const filteredFileList = fileList
      .slice(0, 2)
      .map(file => {
        if (file.originFileObj) {
          return file.originFileObj;
        }
        return file;
      });

    setImageFiles(filteredFileList);
  };

  const handleRemoveVideo = () => {
    setVideoFile(null);
  };

  const handleRemoveImage = (index) => {
    setImageFiles(prev => prev.filter((_, i) => i !== index));
  };

  const handleReasonChange = (checkedValues) => {
    setSelectedReasons(checkedValues);
  };

  const handleComplaintTypeChange = (e) => {
    const newType = e.target.value;
    setComplaintType(newType);
    setSelectedReasons([]);
    form.setFieldsValue({ complaintType: newType });
  };

  // Function to create object URL for preview
  const getFilePreviewUrl = (file) => {
    if (!file || !(file instanceof File)) return '';
    try {
      console.log('Creating preview URL for:', file.name, file.type);
      return URL.createObjectURL(file);
    } catch (error) {
      console.error('Error creating object URL:', error);
      return '';
    }
  };

  return (
    <Modal
      title="Y√™u c·∫ßu tr·∫£/ƒë·ªïi h√†ng"
      visible={visible}
      onCancel={onCancel}
      footer={null}
      width={800}
      styles={{
        body: {
          padding: 0,
          maxHeight: '83vh',
          overflow: 'hidden',
        },
      }}
    >
      <div
        style={{
          padding: '0px 16px',
          maxHeight: 'calc(83vh - 60px)', // Tr·ª´ chi·ªÅu cao ti√™u ƒë·ªÅ
          overflowY: 'auto',
          scrollbarWidth: 'thin', // Firefox
          scrollbarColor: '#d9d9d9 transparent',
        }}
      >
        <Form
          form={form}
          layout="vertical"
          onFinish={handleSubmit}
          initialValues={{ complaintType: complaintType }}
        >
          <Row gutter={[24, 24]}>
            <Col span={24}>
              <Form.Item
                name="complaintType"
                label="Lo·∫°i y√™u c·∫ßu"
                rules={[{ required: true, message: 'Vui l√≤ng ch·ªçn lo·∫°i y√™u c·∫ßu' }]}
              >
                <Radio.Group onChange={handleComplaintTypeChange} value={complaintType}>
                  <Radio.Button value="refund">Tr·∫£ h√†ng & Ho√†n ti·ªÅn</Radio.Button>
                  <Radio.Button value="exchange">ƒê·ªïi h√†ng</Radio.Button>
                </Radio.Group>
              </Form.Item>
            </Col>

            <Col span={24}>
              <Card
                style={{ backgroundColor: '#f6ffed', border: '1px solid #b7eb8f', marginBottom: 16 }}
                bodyStyle={{ padding: 16 }}
              >
                <Space direction="vertical" size={4}>
                  <Text strong style={{ fontSize: 16 }}>üõçÔ∏è C√°ch ch·ªçn s·∫£n ph·∫©m khi·∫øu n·∫°i</Text>
                  <Text type="secondary">
                    ‚Ä¢ Nh·∫•n v√†o t·ª´ng s·∫£n ph·∫©m b√™n d∆∞·ªõi ƒë·ªÉ <Text strong>ch·ªçn ho·∫∑c b·ªè ch·ªçn</Text> s·∫£n ph·∫©m mu·ªën khi·∫øu n·∫°i.
                  </Text>
                  <Text type="secondary">
                    ‚Ä¢ Sau khi ch·ªçn, b·∫°n c√≥ th·ªÉ <Text strong>ƒëi·ªÅu ch·ªânh s·ªë l∆∞·ª£ng</Text> s·∫£n ph·∫©m mu·ªën ho√†n ti·ªÅn ho·∫∑c ƒë·ªïi h√†ng.
                  </Text>
                  <Text type="secondary">
                    ‚Ä¢ Vui l√≤ng ch·ªçn √≠t nh·∫•t <Text strong>m·ªôt s·∫£n ph·∫©m</Text> tr∆∞·ªõc khi g·ª≠i y√™u c·∫ßu.
                  </Text>
                  <Text type="secondary">
                    ‚Ä¢ B·∫°n c√≥ th·ªÉ ch·ªçn nhi·ªÅu s·∫£n ph·∫©m trong c√πng m·ªôt y√™u c·∫ßu üí°
                  </Text>
                </Space>
              </Card>

              <Title level={5}>Ch·ªçn s·∫£n ph·∫©m c·∫ßn khi·∫øu n·∫°i</Title>
              <Space direction="vertical" style={{ width: '100%' }}>
                {selectedProductForComplaint?.orderDetails?.map((item) => {
                  const isSelected = selectedProducts.some(p => p.productId === item.productId);
                  const selectedProduct = selectedProducts.find(p => p.productId === item.productId);
                  const productDetail = productDetails[item.productId];

                  return (
                    <Card
                      key={item.productId}
                      hoverable
                      style={{
                        width: '100%',
                        border: isSelected ? '2px solid #52c41a' : '1px solid #f0f0f0',
                        cursor: 'pointer'
                      }}
                      styles={{ body: { padding: '12px' } }}
                      onClick={() => handleProductSelect(item)}
                    >
                      <Row align="middle" gutter={16}>
                        <Col>
                          <Image
                            src={productDetail?.image?.imageUrl}
                            alt={productDetail?.name}
                            width={80}
                            height={80}
                            style={{ objectFit: 'cover' }}
                          />
                        </Col>
                        <Col flex="auto">
                          <Text strong>{productDetail?.name}</Text>
                          <br />
                          <Text type="secondary">S·ªë l∆∞·ª£ng ƒë·∫∑t: {item.quantity}</Text>
                          <br />
                          <Text type="secondary">ƒê∆°n gi√°: {item.price.toLocaleString()}ƒë</Text>
                          {isSelected && (
                            <div style={{ marginTop: 8 }}>
                              <Text>S·ªë l∆∞·ª£ng {complaintType === 'refund' ? 'ho√†n ti·ªÅn' : 'ƒë·ªïi tr·∫£'}:</Text>
                              <InputNumber
                                min={1}
                                max={item.quantity}
                                value={selectedProduct?.selectedQuantity}
                                onChange={(value) => handleQuantityChange(item.productId, value)}
                                style={{ marginLeft: 8, width: 80 }}
                                onClick={(e) => e.stopPropagation()}
                              />
                            </div>
                          )}
                        </Col>
                      </Row>
                    </Card>
                  );
                })}
              </Space>
            </Col>

            <Col span={24}>
              <Form.Item
                label="L√Ω do khi·∫øu n·∫°i"
                required
                tooltip="Vui l√≤ng ch·ªçn √≠t nh·∫•t m·ªôt l√Ω do ho·∫∑c nh·∫≠p l√Ω do kh√°c"
              >
                <Space direction="vertical" style={{ width: '100%' }}>
                  <Checkbox.Group
                    style={{ width: '100%' }}
                    onChange={handleReasonChange}
                    value={selectedReasons}
                  >
                    <Space direction="vertical" style={{ width: '100%' }}>
                      {(complaintType === 'refund' ? REFUND_REASONS : EXCHANGE_REASONS).map((reason, index) => (
                        <Checkbox key={index} value={reason} style={{ marginLeft: 0 }}>
                          {reason}
                        </Checkbox>
                      ))}
                    </Space>
                  </Checkbox.Group>

                  <Divider>L√Ω do kh√°c</Divider>

                  <Form.Item
                    name="customReason"
                    style={{ marginBottom: 0 }}
                  >
                    <TextArea
                      placeholder="Nh·∫≠p l√Ω do kh√°c (n·∫øu c√≥)"
                      rows={3}
                      maxLength={500}
                      showCount
                    />
                  </Form.Item>
                </Space>
              </Form.Item>
            </Col>

            <Col span={24}>
              <Card
                style={{ backgroundColor: '#fffbe6', border: '1px solid #ffe58f', marginBottom: 16 }}
                bodyStyle={{ padding: 16 }}
              >
                <Space direction="vertical" size={4}>
                  <Text strong style={{ fontSize: 16 }}>üì∏ H∆∞·ªõng d·∫´n ƒë√≠nh k√®m minh ch·ª©ng</Text>
                  <Text type="secondary">
                    ‚Ä¢ <Text strong>B·∫Øt bu·ªôc:</Text> T·∫£i l√™n <Text underline>01 video minh ch·ª©ng</Text> cho s·∫£n ph·∫©m b·ªã l·ªói, kh√¥ng ƒë√∫ng m√¥ t·∫£ ho·∫∑c c√≥ v·∫•n ƒë·ªÅ.
                  </Text>
                  <Text type="secondary">
                    ‚Ä¢ <Text strong>T√πy ch·ªçn:</Text> B·∫°n c√≥ th·ªÉ t·∫£i th√™m t·ªëi ƒëa <Text underline>02 h√¨nh ·∫£nh</Text> ƒë·ªÉ h·ªó tr·ª£ x·ª≠ l√Ω nhanh h∆°n.
                  </Text>
                  <Text type="secondary">
                    ‚Ä¢ H·ªó tr·ª£ ƒë·ªãnh d·∫°ng: <Text code>.mp4, .mov</Text> cho video ‚Äì <Text code>.jpg, .png</Text> cho h√¨nh ·∫£nh.
                  </Text>
                </Space>
              </Card>
            </Col>

            <Col span={24}>
              <Form.Item
                label={<span>Video minh ch·ª©ng <span style={{ color: '#ff4d4f' }}>*</span></span>}
                required
                tooltip="Vui l√≤ng t·∫£i l√™n video minh ch·ª©ng v·∫•n ƒë·ªÅ c·ªßa s·∫£n ph·∫©m (b·∫Øt bu·ªôc)"
              >
                {!videoFile ? (
                  <Upload
                    accept="video/*"
                    showUploadList={false}
                    customRequest={({ file, onSuccess }) => {
                      setTimeout(() => {
                        onSuccess("ok");
                      }, 0);
                    }}
                    onChange={handleVideoUpload}
                  >
                    <Button icon={<VideoCameraOutlined />}>T·∫£i l√™n video</Button>
                  </Upload>
                ) : (
                  <Card>
                    <Row align="middle" justify="space-between">
                      <Col>
                        <Space>
                          <VideoCameraOutlined style={{ fontSize: '24px', color: '#1890ff' }} />
                          <Text>{videoFile.name}</Text>
                        </Space>
                      </Col>
                      <Col>
                        <Button
                          icon={<DeleteOutlined />}
                          danger
                          onClick={handleRemoveVideo}
                        />
                      </Col>
                    </Row>
                    <div style={{ marginTop: 12 }}>
                      <video
                        src={getFilePreviewUrl(videoFile)}
                        controls
                        style={{ width: '100%', maxHeight: '200px' }}
                        onError={(e) => console.error('Video error:', e)}
                      />
                    </div>
                  </Card>
                )}
              </Form.Item>
            </Col>

            <Col span={24}>
              <Form.Item
                label="H√¨nh ·∫£nh minh ch·ª©ng (t·ªëi ƒëa 2 h√¨nh)"
                tooltip="B·∫°n c√≥ th·ªÉ t·∫£i l√™n t·ªëi ƒëa 2 h√¨nh ·∫£nh b·ªï sung"
              >
                <Upload
                  accept="image/*"
                  listType="picture-card"
                  fileList={imageFiles.map((file, index) => ({
                    uid: `-${index}`,
                    name: file.name,
                    status: 'done',
                    url: file instanceof File ? getFilePreviewUrl(file) : file.url,
                    originFileObj: file instanceof File ? file : null
                  }))}
                  onChange={handleImageUpload}
                  onPreview={(file) => {
                    const previewUrl = file.url || getFilePreviewUrl(file.originFileObj);
                    window.open(previewUrl, '_blank');
                  }}
                  beforeUpload={(file) => {
                    // Check if it's an image file
                    if (!file.type || !file.type.includes('image/')) {
                      message.error('Vui l√≤ng t·∫£i l√™n m·ªôt t·ªáp h√¨nh ·∫£nh');
                      return Upload.LIST_IGNORE;
                    }

                    // Check if we already have 2 images
                    if (imageFiles.length >= 2) {
                      message.warning('Ch·ªâ ƒë∆∞·ª£c t·∫£i l√™n t·ªëi ƒëa 2 h√¨nh ·∫£nh');
                      return Upload.LIST_IGNORE;
                    }

                    // Prevent default upload behavior
                    return false;
                  }}
                  maxCount={2}
                  multiple={false}
                  customRequest={({ file, onSuccess }) => {
                    setTimeout(() => {
                      onSuccess("ok");
                    }, 0);
                  }}
                >
                  {imageFiles.length < 2 && (
                    <div>
                      <PictureOutlined />
                      <div style={{ marginTop: 8 }}>T·∫£i l√™n</div>
                    </div>
                  )}
                </Upload>
                {isUploading && (
                  <Progress percent={progress} status={error ? 'exception' : 'active'} />
                )}
              </Form.Item>
            </Col>

            <Col span={24}>
              <Form.Item style={{ display: 'flex', justifyContent: 'flex-end' }}>
                <Space>
                  <Button onClick={onCancel}>
                    H·ªßy
                  </Button>
                  <Button
                    type="primary"
                    htmlType="submit"
                    loading={loading || isUploading}
                    disabled={
                      selectedProducts.length === 0 ||
                      (selectedReasons.length === 0 && !form.getFieldValue('customReason')) ||
                      !videoFile
                    }
                  >
                    G·ª≠i y√™u c·∫ßu
                  </Button>
                </Space>
              </Form.Item>
            </Col>
          </Row>
        </Form>
      </div>
    </Modal>
  );
};

export default ComplaintModal; 